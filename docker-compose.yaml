version: '3.8'

services:
  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: tools-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - tools-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO对象存储服务
  minio:
    image: minio/minio:latest
    container_name: tools-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123456
    command: server /data --console-address ":9001"
    networks:
      - tools-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: tools-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - api_logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123456
      - MINIO_BUCKET_NAME=tools-storage
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tools-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker服务
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: tools-celery-worker
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - worker_logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123456
      - MINIO_BUCKET_NAME=tools-storage
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - tools-network

  # Celery Beat服务（可选，用于定时任务）
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: tools-celery-beat
    restart: unless-stopped
    command: celery -A app.core.worker beat --loglevel=info
    volumes:
      - ./app:/app/app
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - beat_logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123456
      - MINIO_BUCKET_NAME=tools-storage
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tools-network

volumes:
  redis_data:
    driver: local
  minio_data:
    driver: local
  api_logs:
    driver: local
  worker_logs:
    driver: local
  beat_logs:
    driver: local

networks:
  tools-network:
    driver: bridge